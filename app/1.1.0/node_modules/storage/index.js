/** 
 * MODULE Storage 
 * @author dnech@mail.ru
 * @version 0.0.1
*/
"use strict";

var fs   = require('fs');
var path = require('path');

/* Class Storage */ 
class Storage {

  constructor(path, config) {
    config = config || {};
    this.path   = path;
    this.ext    = config.ext || '';
    this.silent = config.silent || true;
    this.error  = config.error || function(err, data) {};
    
    this._err   = function(err, data, ret, cb) {
      if (typeof cb === 'undefined') {
        return this.error(err, data) || ret;
      }
      ret = this.error(err, data) || ret;
      return (this.silent) ? cb(null, ret) : cb(err, ret);
    };  
  };
  
  list(cb) {
    if (typeof cb === 'undefined') {
      /* list Sync */  
      try {
        var files = [];
        fs.readdirSync(this.path).forEach((file) => {
          if (file.substring(file.length - this.ext.length) === this.ext) {
            files.push(file.substring(0, file.length - this.ext.length));
          }
        });
        files.sort();
        return files;
      } catch(err) {
        return this._err(err, {action: 'list'}, []);
      }
    } else {
      /* list Async */
      fs.readdir(this.path, (err, data) => {
        if (err) {
          return this._err(err, {action: 'list'}, [], cb);
        }
        var files = [];
        data.forEach((file) => {
          if (file.substring(file.length - this.ext.length) === this.ext) {
            files.push(file.substring(0, file.length - this.ext.length));
          }
        });
        files.sort();
        return cb(null, files);
      });
    };  
  };
  
  get(key, cb) {
    if (typeof cb === 'undefined') {
      /* get Sync */
      try {
        return JSON.parse(fs.readFileSync(path.resolve(this.path, key+this.ext), 'utf8'));
      } catch(err) {
        return this._err(err, {action: 'get', key: key}, undefined);
      }
    } else {
      /* get Async */
      fs.readFile(path.resolve(this.path, key+this.ext), 'utf8', (err, data) => {
        if (err) {
          return this._err(err, {action: 'get', key: key}, undefined, cb);
        }
        try {
          data = JSON.parse(data);
        } catch(err) {
          return this._err(err, {action: 'get', key: key}, undefined, cb);
        }
        return cb(null, data);
      });
    }
  };

  set(key, value, cb) {
    if (typeof cb === 'undefined') {
      /* set Sync */
      try {
        if (typeof value === 'undefined') {
          return this.remove(key);
        } else {
          fs.writeFileSync(path.resolve(this.path, key+this.ext), JSON.stringify(value), 'utf8');
          return true;
        }
      } catch(err) {
        return this._err(err, {action: 'set', key: key, value: value}, false);
      }
    } else {
      /* set Async */
      try {
        value = JSON.stringify(value);
      } catch(err) {
        return this._err(err, {action: 'set', key: key, value: value}, false, cb);
      }
      fs.writeFile(path.resolve(this.path, key+this.ext), value, 'utf8', (err) => {
        if (err) {
          return this._err(err, {action: 'set', key: key, value: value}, false, cb);
        } 
        return cb(null, true);
      });
    }
  };

  remove(key, cb) {
    if (typeof cb === 'undefined') {
      /* remove Sync */
      try {
        fs.unlinkSync(path.resolve(this.path, key+this.ext));
        return true;
      } catch(err) {
        return this._err(err, {action: 'remove', key: key}, false);
      }
    } else {
      /* remove Async */
      fs.unlink(path.resolve(this.path, key+this.ext), (err) => {
        if (err) {
          return this._err(err, {action: 'remove', key: key}, false, cb);
        }
        return cb(null, true);
      });
    }
  };
  
  removeAll() {
    this.list().forEach((file) => {
      if (!this.remove(file)){
        return false;
      }
    });
    return true;  
  };
  
};

module.exports = Storage;
