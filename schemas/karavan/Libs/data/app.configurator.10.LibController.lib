{"enable":true,"script":false,"acl":"#","sandbox":"{}","src":"(function(){\r\n\r\n/* LIBS */\r\nappDIS.config(function ($stateProvider, $urlRouterProvider, $controllerProvider, $provide, $compileProvider){\r\n  $stateProvider.state ('common.libs', {\r\n    url: '/libs',\r\n    templateUrl: 'views/libs.html'\r\n  }); \r\n})\r\n\r\n\r\n.filter('objectToArray', function() {\r\n  return function(items, keyName) {\r\n    var filtered = [];\r\n    angular.forEach(items, function(item, i) {\r\n      item[keyName] = i;\r\n      filtered.push(item);\r\n    });\r\n    return filtered;\r\n  };\r\n})\r\n\r\n.filter('startFrom', function() {\r\n    return function(input, start) {\r\n        start = +start; //parse to int\r\n        return input.slice(start);\r\n    }\r\n})\r\n\r\n\r\n.controller('libsCtrl', function($scope, $window, Idle) {\r\n  \r\n        \r\n  /* Список библиотек */\r\n  $scope.search   = '';\r\n  $scope.list     = {};\r\n  $scope.currentPage = 1;\r\n  $scope.pageSize    = 25;\r\n  $scope.pageLength  = 0;\r\n  \r\n  \r\n  $scope.numberOfPages=function(){\r\n    return Math.ceil(Object.keys($scope.list).length/$scope.pageSize);                \r\n  }\r\n  \r\n  \r\n  $scope.listMsg  = '';\r\n  $scope.listShow = false;\r\n  \r\n  $scope.listUpdate = function() {\r\n    App.Direct.AdminArea.Libs.list({}, (err, data)=>{\r\n      $scope.$apply(function () {\r\n        if (err) {\r\n          $scope.list = {};\r\n          $scope.listMsg = err;\r\n          console.error('listCtrl.listUpdate', err);\r\n          return; \r\n        }\r\n        $scope.list = data;\r\n        $scope.pageLength = Object.keys($scope.list).length;\r\n        $scope.listMsg = '';\r\n        console.log('listCtrl.listUpdate', data);\r\n      }); \r\n    });\r\n  }; \r\n  \r\n  \r\n  $scope.tabs = [];\r\n  \r\n  $scope.addTab = function(name, type) {\r\n    \r\n    var idx;\r\n    \r\n    console.log('addTab Start', name, id);\r\n    \r\n    $scope.tabs.forEach((item, i)=>{\r\n      console.log('addTab forEach', item);\r\n      if (name === item.orig) {\r\n        idx = i;\r\n      }\r\n    });\r\n\r\n    if (typeof idx !== 'undefined') { \r\n      $scope.tabs[idx].active = true;\r\n      console.log('addTab Finding Select', $scope.active);\r\n      return;\r\n    }\r\n    \r\n    var id = $scope.tabs.length;\r\n    initLib(id, name, (type === 'system'));\r\n    $scope.getData(id);\r\n    $scope.tabs[id].active = true;\r\n    //$location.hash('top');\r\n    //$anchorScroll();\r\n    $window.scrollTo(0, 0);\r\n    console.log('addTab Finding New Tab', $scope.active);\r\n  }; \r\n\r\n  $scope.closeTab = function(idx) {\r\n    var lib = $scope.tabs[idx];\r\n    if (lib.modifed) {\r\n      swal({   \r\n        title: 'Внимание',   \r\n        text:  'Библиотека \"'+lib.name+'\" изменена, сохранить изменения?',   \r\n        type:  'warning',   \r\n        showConfirmButton: true,\r\n        showCancelButton:  true,   \r\n        confirmButtonColor: \"#DD6B55\",   \r\n        confirmButtonText:  \"Сохранить\",\r\n        cancelButtonColor:  \"#DD6B55\",   \r\n        cancelButtonText:   \"Отменить\",\r\n        closeOnConfirm: false, \r\n        closeOnCancel: true,    \r\n      }, function(isConfirm){\r\n        if (isConfirm) {\r\n           $scope.setData(idx);\r\n           $scope.tabs.splice(idx, 1);\r\n        } else {\r\n           $scope.tabs.splice(idx, 1); \r\n        }\r\n      });  \r\n    } else {    \r\n      console.log('closeTab ok', idx);\r\n      $scope.tabs.splice(idx, 1);\r\n    }\r\n  };\r\n\r\n  $scope.updateTab = function(idx) {\r\n    var name = $scope.tabs[idx].orig;\r\n    var ro = $scope.tabs[idx].ro;\r\n    initLib(idx, name, ro);\r\n    $scope.getData(idx);\r\n    $scope.tabs[idx].active = true;\r\n  };\r\n  \r\n  // Библиотека\r\n  function initLib(id, name, ro) {\r\n    $scope.tabs[id] = {\r\n      modifed: false,\r\n      protect: true,\r\n      orig:   name,\r\n      name:   name,\r\n      ro:     ro,\r\n      data:   {},\r\n      error:   {},\r\n      editors: {\r\n        acl: {\r\n          mode: 'json',\r\n          editor: {}\r\n        },\r\n        sandbox: {\r\n          mode: 'javascript',\r\n          editor: {}\r\n        },\r\n        src: {\r\n          mode: 'javascript',\r\n          editor: {}\r\n        },\r\n        font:{\r\n          name: \"Courier New\",\r\n          size: \"10pt\"\r\n        }\r\n      },\r\n      aceLoadedAcl: function(e) {$scope.aceLoaded(id, 'acl', e);},\r\n      aceLoadedSb:  function(e) {$scope.aceLoaded(id, 'sandbox', e);},\r\n      aceLoadedSrc: function(e) {$scope.aceLoaded(id, 'src', e);}\r\n    };\r\n  };\r\n  \r\n  $scope.getData = function(id) {\r\n    var lib = $scope.tabs[id];\r\n    App.Direct.AdminArea.Libs.get(lib.orig, (err, data)=>{\r\n      $scope.$apply(function () {\r\n        \r\n        if (err) {\r\n          lib.error = err;\r\n          growlService.growl('Error: '+err, 'inverse');\r\n          console.error('libsCtrl.getLib', err);\r\n          return; \r\n        }\r\n        \r\n        lib.modifed = false;\r\n        lib.data    = data;\r\n        loadLib(id);\r\n        \r\n        console.log('libsCtrl.getLib', lib.orig);\r\n      }); \r\n    });\r\n  };\r\n  \r\n  $scope.setData = function(id) {\r\n    var lib = $scope.tabs[id];\r\n    App.Direct.AdminArea.Libs.set({name:lib.name, data:saveLib(id)}, (err, data)=>{\r\n      $scope.$apply(function () {\r\n        console.log('libsCtrl.setData', data);\r\n        if (err) {\r\n          lib.error = err;\r\n          console.log('Ошибка cохранения библиотеки \"'+lib.name+'\"', err);    \r\n          swal({   \r\n            title: 'Ошибка',   \r\n            text:  'Ошибка cохранения библиотеки \"'+lib.name+'\"',   \r\n            type:  'error',   \r\n            showConfirmButton: true\r\n          }); \r\n        } else {\r\n          lib.modifed = false;\r\n          lib.orig = lib.name;\r\n          $scope.listUpdate();\r\n          swal({   \r\n            title: 'Сохранено',   \r\n            text:  'Сохранена библиотека \"'+lib.name+'\"',   \r\n            type:  'success',   \r\n            showConfirmButton: false,\r\n            showCancelButton:  false,\r\n            timer: 1000\r\n          });\r\n        }\r\n      }); \r\n    });\r\n  };\r\n  \r\n  $scope.delData = function(id) {\r\n    $scope.delDataByName($scope.tabs[id].name);\r\n  };\r\n  \r\n  \r\n  $scope.delDataByName = function(name) {\r\n    swal({   \r\n        title: 'Внимание',   \r\n        text:  'Вы действительно хотите удалить библиотеку \"'+name+'\"!',   \r\n        type:  'warning',   \r\n        showConfirmButton: true,\r\n        showCancelButton:  true,   \r\n        confirmButtonColor: \"#DD6B55\",   \r\n        confirmButtonText:  \"Удалить\",\r\n        cancelButtonColor:  \"#DD6B55\",   \r\n        cancelButtonText:   \"Отменить\",\r\n        closeOnConfirm: false, \r\n        closeOnCancel: true,    \r\n    }, function(isConfirm){\r\n        if (isConfirm) {     \r\n          App.Direct.AdminArea.Libs.delete(name, (err, data)=>{\r\n            $scope.listUpdate();\r\n            $scope.tabRecalc();\r\n            if (err) {\r\n              console.log('Ошибка удаления библиотеки \"'+name+'\"', err);    \r\n              swal({   \r\n                title: 'Ошибка',   \r\n                text:  'Ошибка удаления библиотеки \"'+name+'\"',   \r\n                type:  'error',   \r\n                showConfirmButton: true\r\n              }); \r\n            } else {\r\n              swal({   \r\n                title: 'Удалено',   \r\n                text:  'Удалена библиотека \"'+name+'\"',   \r\n                type:  'success',   \r\n                showConfirmButton: false,\r\n                showCancelButton:  false,\r\n                timer: 1000\r\n              });\r\n            }\r\n          });\r\n        }\r\n    });\r\n  };\r\n  \r\n  \r\n  // Список редакторoв Ace  \r\n  \r\n  $scope.change = function(id) {\r\n    console.log('change', id);\r\n    var lib = $scope.tabs[id];\r\n    lib.modifed = true;\r\n    lib.editors.acl.editor.getSession().setMode(\"ace/mode/\"+lib.editors.acl.mode);\r\n    lib.editors.sandbox.editor.getSession().setMode(\"ace/mode/\"+lib.editors.sandbox.mode);\r\n    if (lib.data.script) {\r\n      lib.editors.src.editor.getSession().setMode(\"ace/mode/javascript\");\r\n    } else { \r\n      lib.editors.src.editor.getSession().setMode(\"ace/mode/javascript\");\r\n    }\r\n  };\r\n  \r\n  // Set data in editors \r\n  function loadLib(id) {\r\n    var lib = $scope.tabs[id];\r\n\r\n    lib.editors.acl.editor.setValue(lib.data.acl, -1);\r\n    lib.editors.sandbox.editor.setValue(lib.data.sandbox, -1);\r\n    lib.editors.src.editor.setValue(lib.data.src, -1);\r\n        \r\n    lib.editors.acl.editor.resize();\r\n    lib.editors.sandbox.editor.resize();\r\n    lib.editors.src.editor.resize();\r\n    \r\n    lib.editors.acl.editor.see     = true;\r\n    lib.editors.sandbox.editor.see = true;\r\n    lib.editors.src.editor.see     = true;\r\n  };\r\n  \r\n  // Compile data from editors \r\n  function saveLib(id) {\r\n    var lib = $scope.tabs[id];\r\n    return {\r\n      enable:  lib.data.enable,\r\n      script:  lib.data.script,\r\n      acl:     lib.editors.acl.editor.getValue(),\r\n      sandbox: lib.editors.sandbox.editor.getValue(),\r\n      src:     lib.editors.src.editor.getValue()\r\n    }  \r\n  };\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  $scope.aceLoaded = function(id, type, _editor) {\r\n    _editor.$blockScrolling = true;\r\n    \r\n    var lib = $scope.tabs[id];\r\n    _editor.getSession().setMode(\"ace/mode/\"+lib.editors[type].mode);\r\n    _editor.setOptions({\r\n      fontFamily: lib.editors.font.name,\r\n      fontSize: lib.editors.font.size\r\n    });\r\n    \r\n    lib.editors[type].editor = _editor;\r\n    \r\n    // ============================= \r\n    var _session = _editor.getSession();\r\n    //var _renderer = _editor.renderer;\r\n\r\n    // Options\r\n    //_editor.setReadOnly(true);\r\n    //_session.setUndoManager(new ace.UndoManager());\r\n    //_renderer.setShowGutter(false);\r\n\r\n    // Events\r\n    \r\n    //_editor.on(\"changeSession\", function(e){ \r\n    //  lib.modifed = true;\r\n    //});\r\n    \r\n    //_editor.container.on('click mousemove keydown DOMMouseScroll mousewheel mousedown touchstart touchmove scroll', function(e) {\r\n    //  Idle.action(e);  \r\n    //});\r\n    //var _input = _editor.textInput.getElement();\r\n    //_input.on('click keydown', function(e) {\r\n    //  Idle.action(e);  \r\n    //});\r\n    \r\n    _editor.keyBinding.originalOnCommandKey = _editor.keyBinding.onCommandKey;\r\n    _editor.keyBinding.onCommandKey = function(e, hashId, keyCode) {\r\n      Idle.action(e);\r\n      this.originalOnCommandKey(e, hashId, keyCode);\r\n    };\r\n\r\n    _session.on(\"change\", function(e){\r\n      if (_editor.see) {\r\n        $scope.$apply(function () {\r\n          lib.modifed = true;\r\n        });\r\n      }  \r\n    });\r\n    \r\n    // ============================= \r\n    \r\n  };\r\n  \r\n});\r\n \r\n\r\n\r\n\r\n            \r\n})();"}